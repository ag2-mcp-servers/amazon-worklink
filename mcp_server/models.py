# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:16:48+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AcmCertificateArn(
    RootModel[
        constr(
            pattern=r'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=/,.@-]+)*'
        )
    ]
):
    root: constr(
        pattern=r'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=/,.@-]+)*'
    )


class AssociateDomainResponse(BaseModel):
    pass


class AuditStreamArn(
    RootModel[
        constr(pattern=r'^arn:aws:kinesis:.+:[0-9]{12}:stream/AmazonWorkLink-.*$')
    ]
):
    root: constr(pattern=r'^arn:aws:kinesis:.+:[0-9]{12}:stream/AmazonWorkLink-.*$')


class AuthorizationProviderType(Enum):
    SAML = 'SAML'


class Boolean(RootModel[bool]):
    root: bool


class Certificate(
    RootModel[
        constr(
            pattern=r'-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
            min_length=1,
            max_length=8192,
        )
    ]
):
    root: constr(
        pattern=r'-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
        min_length=1,
        max_length=8192,
    )


class CertificateChain(
    RootModel[
        constr(
            pattern=r'(-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
            min_length=1,
            max_length=32768,
        )
    ]
):
    root: constr(
        pattern=r'(-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
        min_length=1,
        max_length=32768,
    )


class CompanyCode(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class DateTime(RootModel[datetime]):
    root: datetime


class DeleteFleetResponse(BaseModel):
    pass


class DescribeAuditStreamConfigurationResponse(BaseModel):
    AuditStreamArn_1: Optional[AuditStreamArn] = Field(None, alias='AuditStreamArn')


class DescribeDevicePolicyConfigurationResponse(BaseModel):
    DeviceCaCertificate: Optional[Certificate] = None


class DeviceManufacturer(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DeviceModel(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DeviceOperatingSystemName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DeviceOperatingSystemVersion(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DevicePatchLevel(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DeviceStatus(Enum):
    ACTIVE = 'ACTIVE'
    SIGNED_OUT = 'SIGNED_OUT'


class DisassociateDomainResponse(BaseModel):
    pass


class DisassociateWebsiteAuthorizationProviderResponse(BaseModel):
    pass


class DisassociateWebsiteCertificateAuthorityResponse(BaseModel):
    pass


class DisplayName(RootModel[constr(max_length=100)]):
    root: constr(max_length=100)


class DomainName(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
            min_length=1,
            max_length=253,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
        min_length=1,
        max_length=253,
    )


class DomainStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    ASSOCIATING = 'ASSOCIATING'
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    DISASSOCIATING = 'DISASSOCIATING'
    DISASSOCIATED = 'DISASSOCIATED'
    FAILED_TO_ASSOCIATE = 'FAILED_TO_ASSOCIATE'
    FAILED_TO_DISASSOCIATE = 'FAILED_TO_DISASSOCIATE'


class DomainSummary(BaseModel):
    CreatedTime: DateTime
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    DomainName_1: DomainName = Field(..., alias='DomainName')
    DomainStatus_1: DomainStatus = Field(..., alias='DomainStatus')


class DomainSummaryList(RootModel[List[DomainSummary]]):
    root: List[DomainSummary]


class FleetArn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class FleetName(
    RootModel[
        constr(
            pattern=r'^[a-z0-9](?:[a-z0-9\-]{0,46}[a-z0-9])?$',
            min_length=1,
            max_length=48,
        )
    ]
):
    root: constr(
        pattern=r'^[a-z0-9](?:[a-z0-9\-]{0,46}[a-z0-9])?$', min_length=1, max_length=48
    )


class FleetStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    FAILED_TO_CREATE = 'FAILED_TO_CREATE'
    FAILED_TO_DELETE = 'FAILED_TO_DELETE'


class Id(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class IdentityProviderType(Enum):
    SAML = 'SAML'


class InternalServerErrorException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class NextToken(RootModel[constr(pattern=r'[\w\-]+', min_length=1, max_length=4096)]):
    root: constr(pattern=r'[\w\-]+', min_length=1, max_length=4096)


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RestoreDomainAccessRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class RestoreDomainAccessResponse(BaseModel):
    pass


class RevokeDomainAccessRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class RevokeDomainAccessResponse(BaseModel):
    pass


class SamlMetadata(RootModel[constr(min_length=1, max_length=204800)]):
    root: constr(min_length=1, max_length=204800)


class SecurityGroupId(RootModel[constr(pattern=r'^sg-([0-9a-f]{8}|[0-9a-f]{17})$')]):
    root: constr(pattern=r'^sg-([0-9a-f]{8}|[0-9a-f]{17})$')


class SecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=5)


class SignOutUserResponse(BaseModel):
    pass


class SubnetId(RootModel[constr(pattern=r'^subnet-([0-9a-f]{8}|[0-9a-f]{17})$')]):
    root: constr(pattern=r'^subnet-([0-9a-f]{8}|[0-9a-f]{17})$')


class SubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UnauthorizedException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateAuditStreamConfigurationRequest(BaseModel):
    AuditStreamArn_1: Optional[AuditStreamArn] = Field(None, alias='AuditStreamArn')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class UpdateAuditStreamConfigurationResponse(BaseModel):
    pass


class UpdateCompanyNetworkConfigurationResponse(BaseModel):
    pass


class UpdateDevicePolicyConfigurationRequest(BaseModel):
    DeviceCaCertificate: Optional[CertificateChain] = None
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class UpdateDevicePolicyConfigurationResponse(BaseModel):
    pass


class UpdateDomainMetadataRequest(BaseModel):
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    DomainName_1: DomainName = Field(..., alias='DomainName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class UpdateDomainMetadataResponse(BaseModel):
    pass


class UpdateFleetMetadataRequest(BaseModel):
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    OptimizeForEndUserLocation: Optional[Boolean] = None


class UpdateFleetMetadataResponse(BaseModel):
    pass


class UpdateIdentityProviderConfigurationRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    IdentityProviderSamlMetadata: Optional[SamlMetadata] = None
    IdentityProviderType_1: IdentityProviderType = Field(
        ..., alias='IdentityProviderType'
    )


class UpdateIdentityProviderConfigurationResponse(BaseModel):
    pass


class Username(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class VpcId(RootModel[constr(pattern=r'^vpc-([0-9a-f]{8}|[0-9a-f]{17})$')]):
    root: constr(pattern=r'^vpc-([0-9a-f]{8}|[0-9a-f]{17})$')


class WebsiteAuthorizationProviderSummary(BaseModel):
    AuthorizationProviderId: Optional[Id] = None
    AuthorizationProviderType_1: AuthorizationProviderType = Field(
        ..., alias='AuthorizationProviderType'
    )
    CreatedTime: Optional[DateTime] = None
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')


class WebsiteAuthorizationProvidersSummaryList(
    RootModel[List[WebsiteAuthorizationProviderSummary]]
):
    root: List[WebsiteAuthorizationProviderSummary]


class WebsiteCaSummary(BaseModel):
    CreatedTime: Optional[DateTime] = None
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    WebsiteCaId: Optional[Id] = None


class WebsiteCaSummaryList(RootModel[List[WebsiteCaSummary]]):
    root: List[WebsiteCaSummary]


class UpdateFleetMetadataPostRequest(BaseModel):
    DisplayName: Optional[constr(max_length=100)] = Field(
        None,
        description='The fleet name to display. The existing DisplayName is unset if null is passed.',
    )
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    OptimizeForEndUserLocation: Optional[bool] = Field(
        None,
        description='The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.',
    )


class AssociateDomainPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    AcmCertificateArn: constr(
        pattern=r'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=/,.@-]+)*'
    ) = Field(
        ...,
        description='The ARN of an issued ACM certificate that is valid for the domain being associated.',
    )
    DisplayName: Optional[constr(max_length=100)] = Field(
        None, description='The name to display.'
    )
    DomainName: constr(
        pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
        min_length=1,
        max_length=253,
    ) = Field(..., description='The fully qualified domain name (FQDN).')
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The Amazon Resource Name (ARN) of the fleet.'
    )


class AssociateWebsiteAuthorizationProviderPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    AuthorizationProviderType_1: AuthorizationProviderType = Field(
        ...,
        alias='AuthorizationProviderType',
        description='The authorization provider type.',
    )
    DomainName: Optional[
        constr(
            pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
            min_length=1,
            max_length=253,
        )
    ] = Field(
        None,
        description='The domain name of the authorization provider. This applies only to SAML-based authorization providers.',
    )
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class AssociateWebsiteCertificateAuthorityPostRequest(BaseModel):
    Certificate: constr(
        pattern=r'-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
        min_length=1,
        max_length=8192,
    ) = Field(..., description='The root certificate of the CA.')
    DisplayName: Optional[constr(max_length=100)] = Field(
        None, description='The certificate name to display.'
    )
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class CreateFleetPostRequest(BaseModel):
    DisplayName: Optional[constr(max_length=100)] = Field(
        None, description='The fleet name to display.'
    )
    FleetName: constr(
        pattern=r'^[a-z0-9](?:[a-z0-9\-]{0,46}[a-z0-9])?$', min_length=1, max_length=48
    ) = Field(..., description='A unique name for the fleet.')
    OptimizeForEndUserLocation: Optional[bool] = Field(
        None,
        description='The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description=' The tags to add to the resource. A tag is a key-value pair.'
    )


class DeleteFleetPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DescribeAuditStreamConfigurationPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DescribeCompanyNetworkConfigurationPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DescribeDevicePostRequest(BaseModel):
    DeviceId: constr(min_length=1, max_length=256) = Field(
        ..., description="A unique identifier for a registered user's device."
    )
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DescribeDevicePolicyConfigurationPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DescribeDomainPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    DomainName: constr(
        pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
        min_length=1,
        max_length=253,
    ) = Field(..., description='The name of the domain.')
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DescribeFleetMetadataPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The Amazon Resource Name (ARN) of the fleet.'
    )


class DescribeIdentityProviderConfigurationPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DescribeWebsiteCertificateAuthorityPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    WebsiteCaId: constr(min_length=1, max_length=256) = Field(
        ..., description='A unique identifier for the certificate authority.'
    )


class DisassociateDomainPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    DomainName: constr(
        pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
        min_length=1,
        max_length=253,
    ) = Field(..., description='The name of the domain.')
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DisassociateWebsiteAuthorizationProviderPostRequest(BaseModel):
    AuthorizationProviderId: constr(min_length=1, max_length=256) = Field(
        ..., description='A unique identifier for the authorization provider.'
    )
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class DisassociateWebsiteCertificateAuthorityPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    WebsiteCaId: constr(min_length=1, max_length=256) = Field(
        ..., description='A unique identifier for the CA.'
    )


class ListDevicesPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    MaxResults: Optional[conint(ge=1)] = Field(
        None,
        description='The maximum number of results to be included in the next page.',
    )
    NextToken: Optional[constr(pattern=r'[\w\-]+', min_length=1, max_length=4096)] = (
        Field(
            None,
            description='The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
        )
    )


class ListDomainsPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    MaxResults: Optional[conint(ge=1)] = Field(
        None,
        description='The maximum number of results to be included in the next page.',
    )
    NextToken: Optional[constr(pattern=r'[\w\-]+', min_length=1, max_length=4096)] = (
        Field(
            None,
            description='The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
        )
    )


class ListFleetsPostRequest(BaseModel):
    MaxResults: Optional[conint(ge=1)] = Field(
        None,
        description='The maximum number of results to be included in the next page.',
    )
    NextToken: Optional[constr(pattern=r'[\w\-]+', min_length=1, max_length=4096)] = (
        Field(
            None,
            description='The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
        )
    )


class ListWebsiteAuthorizationProvidersPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    MaxResults: Optional[conint(ge=1)] = Field(
        None,
        description='The maximum number of results to be included in the next page.',
    )
    NextToken: Optional[constr(pattern=r'[\w\-]+', min_length=1, max_length=4096)] = (
        Field(
            None,
            description='The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
        )
    )


class ListWebsiteCertificateAuthoritiesPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    MaxResults: Optional[conint(ge=1)] = Field(
        None,
        description='The maximum number of results to be included in the next page.',
    )
    NextToken: Optional[constr(pattern=r'[\w\-]+', min_length=1, max_length=4096)] = (
        Field(
            None,
            description='The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.',
        )
    )


class RestoreDomainAccessPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    DomainName: constr(
        pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
        min_length=1,
        max_length=253,
    ) = Field(..., description='The name of the domain.')
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class RevokeDomainAccessPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    DomainName: constr(
        pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
        min_length=1,
        max_length=253,
    ) = Field(..., description='The name of the domain.')
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class SignOutUserPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    Username: constr(min_length=1, max_length=256) = Field(
        ..., description='The name of the user.'
    )


class TagsResourceArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(
        ..., description='The tags to add to the resource. A tag is a key-value pair.'
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class UpdateAuditStreamConfigurationPostRequest(BaseModel):
    AuditStreamArn: Optional[
        constr(pattern=r'^arn:aws:kinesis:.+:[0-9]{12}:stream/AmazonWorkLink-.*$')
    ] = Field(
        None,
        description='The ARN of the Amazon Kinesis data stream that receives the audit events.',
    )
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class UpdateCompanyNetworkConfigurationPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    SecurityGroupIds: List[SecurityGroupId] = Field(
        ...,
        description='The security groups associated with access to the provided subnets.',
        max_length=5,
    )
    SubnetIds: List[SubnetId] = Field(
        ...,
        description='The subnets used for X-ENI connections from Amazon WorkLink rendering containers.',
    )
    VpcId: constr(pattern=r'^vpc-([0-9a-f]{8}|[0-9a-f]{17})$') = Field(
        ..., description='The VPC with connectivity to associated websites.'
    )


class UpdateDevicePolicyConfigurationPostRequest(BaseModel):
    DeviceCaCertificate: Optional[
        constr(
            pattern=r'(-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
            min_length=1,
            max_length=32768,
        )
    ] = Field(
        None,
        description='The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.',
    )
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class UpdateDomainMetadataPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    DisplayName: Optional[constr(max_length=100)] = Field(
        None, description='The name to display.'
    )
    DomainName: constr(
        pattern=r'^[a-zA-Z0-9]?((?!-)([A-Za-z0-9-]*[A-Za-z0-9])\.)+[a-zA-Z0-9]+$',
        min_length=1,
        max_length=253,
    ) = Field(..., description='The name of the domain.')
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )


class UpdateIdentityProviderConfigurationPostRequest(BaseModel):
    FleetArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The ARN of the fleet.'
    )
    IdentityProviderSamlMetadata: Optional[constr(min_length=1, max_length=204800)] = (
        Field(
            None,
            description='The SAML metadata document provided by the customer’s identity provider. The existing IdentityProviderSamlMetadata is unset if null is passed.',
        )
    )
    IdentityProviderType_1: IdentityProviderType = Field(
        ..., alias='IdentityProviderType', description='The type of identity provider.'
    )


class AssociateDomainRequest(BaseModel):
    AcmCertificateArn_1: AcmCertificateArn = Field(..., alias='AcmCertificateArn')
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    DomainName_1: DomainName = Field(..., alias='DomainName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class AssociateWebsiteAuthorizationProviderRequest(BaseModel):
    AuthorizationProviderType_1: AuthorizationProviderType = Field(
        ..., alias='AuthorizationProviderType'
    )
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class AssociateWebsiteAuthorizationProviderResponse(BaseModel):
    AuthorizationProviderId: Optional[Id] = None


class AssociateWebsiteCertificateAuthorityRequest(BaseModel):
    Certificate_1: Certificate = Field(..., alias='Certificate')
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class AssociateWebsiteCertificateAuthorityResponse(BaseModel):
    WebsiteCaId: Optional[Id] = None


class CreateFleetResponse(BaseModel):
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')


class DeleteFleetRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DescribeAuditStreamConfigurationRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DescribeCompanyNetworkConfigurationRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DescribeCompanyNetworkConfigurationResponse(BaseModel):
    SecurityGroupIds_1: Optional[SecurityGroupIds] = Field(
        None, alias='SecurityGroupIds'
    )
    SubnetIds_1: Optional[SubnetIds] = Field(None, alias='SubnetIds')
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class DescribeDevicePolicyConfigurationRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DescribeDeviceRequest(BaseModel):
    DeviceId: Id
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DescribeDeviceResponse(BaseModel):
    FirstAccessedTime: Optional[DateTime] = None
    LastAccessedTime: Optional[DateTime] = None
    Manufacturer: Optional[DeviceManufacturer] = None
    Model: Optional[DeviceModel] = None
    OperatingSystem: Optional[DeviceOperatingSystemName] = None
    OperatingSystemVersion: Optional[DeviceOperatingSystemVersion] = None
    PatchLevel: Optional[DevicePatchLevel] = None
    Status: Optional[DeviceStatus] = None
    Username_1: Optional[Username] = Field(None, alias='Username')


class DescribeDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DescribeDomainResponse(BaseModel):
    AcmCertificateArn_1: Optional[AcmCertificateArn] = Field(
        None, alias='AcmCertificateArn'
    )
    CreatedTime: Optional[DateTime] = None
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    DomainStatus_1: Optional[DomainStatus] = Field(None, alias='DomainStatus')


class DescribeFleetMetadataRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DescribeIdentityProviderConfigurationRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DescribeIdentityProviderConfigurationResponse(BaseModel):
    IdentityProviderSamlMetadata: Optional[SamlMetadata] = None
    IdentityProviderType_1: Optional[IdentityProviderType] = Field(
        None, alias='IdentityProviderType'
    )
    ServiceProviderSamlMetadata: Optional[SamlMetadata] = None


class DescribeWebsiteCertificateAuthorityRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    WebsiteCaId: Id


class DescribeWebsiteCertificateAuthorityResponse(BaseModel):
    Certificate_1: Optional[Certificate] = Field(None, alias='Certificate')
    CreatedTime: Optional[DateTime] = None
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')


class DeviceSummary(BaseModel):
    DeviceId: Optional[Id] = None
    DeviceStatus_1: Optional[DeviceStatus] = Field(None, alias='DeviceStatus')


class DeviceSummaryList(RootModel[List[DeviceSummary]]):
    root: List[DeviceSummary]


class DisassociateDomainRequest(BaseModel):
    DomainName_1: DomainName = Field(..., alias='DomainName')
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DisassociateWebsiteAuthorizationProviderRequest(BaseModel):
    AuthorizationProviderId: Id
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')


class DisassociateWebsiteCertificateAuthorityRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    WebsiteCaId: Id


class ListDevicesRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDevicesResponse(BaseModel):
    Devices: Optional[DeviceSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDomainsRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDomainsResponse(BaseModel):
    Domains: Optional[DomainSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFleetsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListWebsiteAuthorizationProvidersRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListWebsiteAuthorizationProvidersResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WebsiteAuthorizationProviders: Optional[
        WebsiteAuthorizationProvidersSummaryList
    ] = None


class ListWebsiteCertificateAuthoritiesRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListWebsiteCertificateAuthoritiesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    WebsiteCertificateAuthorities: Optional[WebsiteCaSummaryList] = None


class SignOutUserRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    Username_1: Username = Field(..., alias='Username')


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    Tags: TagMap


class UpdateCompanyNetworkConfigurationRequest(BaseModel):
    FleetArn_1: FleetArn = Field(..., alias='FleetArn')
    SecurityGroupIds_1: SecurityGroupIds = Field(..., alias='SecurityGroupIds')
    SubnetIds_1: SubnetIds = Field(..., alias='SubnetIds')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateFleetRequest(BaseModel):
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    FleetName_1: FleetName = Field(..., alias='FleetName')
    OptimizeForEndUserLocation: Optional[Boolean] = None
    Tags: Optional[TagMap] = None


class DescribeFleetMetadataResponse(BaseModel):
    CompanyCode_1: Optional[CompanyCode] = Field(None, alias='CompanyCode')
    CreatedTime: Optional[DateTime] = None
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    FleetName_1: Optional[FleetName] = Field(None, alias='FleetName')
    FleetStatus_1: Optional[FleetStatus] = Field(None, alias='FleetStatus')
    LastUpdatedTime: Optional[DateTime] = None
    OptimizeForEndUserLocation: Optional[Boolean] = None
    Tags: Optional[TagMap] = None


class FleetSummary(BaseModel):
    CompanyCode_1: Optional[CompanyCode] = Field(None, alias='CompanyCode')
    CreatedTime: Optional[DateTime] = None
    DisplayName_1: Optional[DisplayName] = Field(None, alias='DisplayName')
    FleetArn_1: Optional[FleetArn] = Field(None, alias='FleetArn')
    FleetName_1: Optional[FleetName] = Field(None, alias='FleetName')
    FleetStatus_1: Optional[FleetStatus] = Field(None, alias='FleetStatus')
    LastUpdatedTime: Optional[DateTime] = None
    Tags: Optional[TagMap] = None


class FleetSummaryList(RootModel[List[FleetSummary]]):
    root: List[FleetSummary]


class ListFleetsResponse(BaseModel):
    FleetSummaryList_1: Optional[FleetSummaryList] = Field(
        None, alias='FleetSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None
